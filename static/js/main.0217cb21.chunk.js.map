{"version":3,"sources":["logo.svg","components/Card.js","components/Chart.js","components/Forcast.js","components/Location.js","components/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","useState","isFlipped","setFlip","className","onMouseEnter","onMouseLeave","flipDirection","style","backgroundColor","src","icon","alt","date","time","weather","curr","min","max","humid","Chart","days","i","data","labels","datasets","label","borderColor","pointBackgroundColor","pointBorderColor","options","title","display","text","scales","xAxes","ticks","stepSize","yAxes","Forcast","state","city","min_temp","max_temp","prevProps","prevState","this","fetch","response","json","setState","list","name","console","log","forEach","element","push","Math","round","main","temp_min","str","split","reverse","join","filter","day","dt_txt","map","filtered_day","temp_max","temp","humidity","rev","description","dt","Component","Location","color","Navbar","setCity","setDays","onSubmit","event","preventDefault","document","getElementById","value","d","id","type","placeholder","autoComplete","active","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0217cb21.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React ,{useState}  from 'react'\r\nimport ReactCardFlip from 'react-card-flip'\r\n\r\n\r\nexport default function Card(props) {\r\n            const[isFlipped,setFlip]=useState(false);\r\n    return (\r\n\r\n\r\n\r\n\r\n\r\n\r\n     <div >\r\n  \r\n        \r\n        <div className=\"card-transparent\" onMouseEnter={()=>setFlip(true)} onMouseLeave={()=>setFlip(false)} >\r\n        <ReactCardFlip isFlipped={isFlipped} flipDirection=\"vertical\">\r\n    \r\n          <div className=\"card-block special-card\" style={{backgroundColor:\"rgba(245,245,245,0.4)\"}}>\r\n  <img className=\"card-img-top\" src={`https://openweathermap.org/img/w/${props.icon}.png`} alt=\"Card image cap\"/>\r\n  <div className=\"card-body\">\r\n    <h5 className=\"card-title\"><i className=\"fa fa-calendar-o\"></i> {props.date}</h5>\r\n    <h5 className=\"card-title\"><i className=\"fa fa-clock-o\"></i> {props.time}</h5>\r\n  \r\n\r\n    \r\n    \r\n  </div>\r\n  </div>\r\n  \r\n\r\n  <div className=\"card-block special-card\" style={{backgroundColor:\"rgba(245,245,245,0.4)\"}}>\r\n  <div className=\"card-body\">\r\n    \r\n    <h5 className=\"card-title\">{props.weather}</h5>\r\n    <p className=\"cart-text\">\r\n       Temp<i className=\"fa fa-thermometer-empty\"></i>:{props.curr}C<br/>\r\n    Min <i className=\"fa fa-thermometer-empty\"></i>:{props.min}C<br/>\r\n          Max <i className=\"fa fa-thermometer-empty\"></i>:  {props.max}C<br/>\r\n          Humidity<i className=\"fa fa-sun-o\"></i>:{props.humid}<br/>\r\n    </p>\r\n    </div>\r\n    </div>\r\n  </ReactCardFlip>\r\n  </div>\r\n  \r\n  \r\n  </div>\r\n  \r\n  \r\n  \r\n\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Line} from 'react-chartjs-2'\r\n\r\nexport default function Chart(props) {\r\n    \r\n    let days=props.days;\r\n    let max=[];let min=[];\r\n    for(let i=0;i<days;i++)\r\n    {\r\n        max[i]=props.data.max[i];\r\n        min[i]=props.data.min[i];\r\n    }\r\n    \r\n    const data={\r\n        labels:['1','2','3','4','5'],\r\n        datasets:[\r\n            {\r\n            label:'Min Temprature in (c)',\r\n            data:min,\r\n            borderColor:'blue',\r\n            backgroundColor:'rgba(255,206,86,0.2)',\r\n            pointBackgroundColor:'rgba(255,206,86,0.2)',\r\n            pointBorderColor:'rgba(255,206,86,0.2)',\r\n            },\r\n            {\r\n                label:'Max Temprature in (c)',\r\n                data:max,\r\n                borderColor:'red',\r\n            backgroundColor:'rgba(255,200,86,0.2)',\r\n            pointBackgroundColor:'rgba(255,206,86,0.2)',\r\n            pointBorderColor:'rgba(255,206,86,0.2)',\r\n                }\r\n        ],\r\n       \r\n            \r\n    }\r\n    const option={\r\n        title:{\r\n            display:true,\r\n            text:'Weather Chart'\r\n        },\r\n        scales:{\r\n            xAxes:[{\r\n                ticks:{\r\n                    min:1,\r\n                    max:5,\r\n                    stepSize:1,\r\n                }\r\n            }\r\n            ],\r\n            yAxes:[{\r\n                ticks:{\r\n                    min:0,\r\n                    max:40,\r\n                    stepSize:5,\r\n                }\r\n            }\r\n            ]\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <Line data={data} options={option} />\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport Card from './Card'\r\nimport Chart from './Chart'\r\n\r\n\r\n\r\nexport default class Forcast extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            data:[],\r\n             city:\"\",\r\n             days:\"\",\r\n             min_temp:[],\r\n            max_temp:[] ,       }\r\n    }\r\n  \r\n    \r\n    async componentDidUpdate(prevProps,prevState){\r\n        if(prevProps.city!==this.props.city||prevProps.days!==this.props.days){\r\n            const key=\"d8de9e264800e85418784220cbc1de01\";\r\n            const response=await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${this.props.city}&cnt=${this.props.days}&appid=${key}`)\r\n            const data = await response.json();\r\n            \r\n            this.setState({data:data.list,city:data.city.name,days:this.props.days},console.log(data))\r\n            \r\n        }\r\n\r\n    }\r\n    async componentDidMount(){\r\n        let min=[];\r\n        let max=[];\r\n        const key=\"d8de9e264800e85418784220cbc1de01\";\r\n        const response=await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${this.props.city}&appid=${key}`)\r\n        const data = await response.json();\r\n              data.list.forEach(element => {\r\n                  min.push(Math.round(element.main.temp_min-273))\r\n                  max.push(Math.round(element.main.temp_min-273));\r\n            \r\n        });\r\n        \r\n        this.setState({data:data.list,city:data.city.name,days:this.props.days,min_temp:min,max_temp:max},console.log(data))\r\n        \r\n      \r\n    }\r\n    rev(str){\r\n        str=str.split(\"-\");\r\n        str=str.reverse();\r\n        str=str.join(\"-\");\r\n        return str;\r\n    }\r\n   \r\n  \r\n    \r\n    render() {\r\n        \r\n        \r\n        \r\n        return (\r\n            <div>\r\n               \r\n                    <div className=\"row mt-5\">\r\n                        \r\n\r\n                {this.state.data.filter(day=>day.dt_txt.split(\" \")[1]===this.props.time).map(filtered_day=>(\r\n\r\n<div className=\"col-lg-2 col-md-3 col-sm-4\" key={filtered_day.dt}>\r\n    \r\n<Card min={Math.round(filtered_day.main.temp_min-273)}\r\nmax={Math.round(filtered_day.main.temp_max-273)}\r\ncurr={Math.round(filtered_day.main.temp-273)}\r\n humid={filtered_day.main.humidity}\r\n  date={this.rev(filtered_day.dt_txt.split(\" \")[0])}\r\n  time={filtered_day.dt_txt.split(\" \")[1]}\r\n  weather={filtered_day.weather[0].description}\r\n  icon={filtered_day.weather[0].icon}></Card>\r\n  </div>\r\n                ))}\r\n            \r\n              \r\n            \r\n            </div>\r\n         \r\n            <div className=\"row \">\r\n\r\n                            <div className=\"chart\">\r\n\r\n                            <Chart data={{min:this.state.min_temp,\r\n                                          max:this.state.max_temp                    }} days={this.props.days/8}/>\r\n                            </div>\r\n\r\n\r\n            </div>\r\n            </div>\r\n            \r\n        \r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Location(props) {\r\n    return (\r\n        \r\n\r\n        \r\n           \r\n            <h1 style={{color:\"whitesmoke\"}}><i className=\"fa fa-map-marker\"  color=\"red\"></i> {props.city}</h1>\r\n            \r\n    \r\n\r\n        \r\n    )\r\n}\r\n","import React ,{useState}from 'react'\r\nimport Forcast from './Forcast'\r\nimport Location from './Location'\r\n\r\nexport default function Navbar() {\r\n    const[city,setCity]=useState('Mumbai')\r\n    const[days,setDays]=useState(40)\r\n    return (\r\n        <div>\r\n\r\n\r\n\r\n            <div className=\"row mt-5\">\r\n            <div className=\"col-lg-5 col-lg-5 col-lg-5\" > \r\n            <Location city={city}/>\r\n               </div>\r\n            \r\n             <div className=\"col-md-2 col-md-3 col-md-4\" >\r\n            <form className=\"form-inline\" onSubmit={(event)=>{event.preventDefault();\r\n                if(document.getElementById('ct').value!==''){\r\n                    setCity(document.getElementById('ct').value);\r\n                    var d=document.getElementById('ndays').value.split(\" \");\r\n                    d=d[0];\r\n                    if(d==='1')\r\n                    setDays(8);\r\n                    else if(d==='2')\r\n                    setDays(16)\r\n                    else if(d==='3')\r\n                    setDays(24)\r\n                    else if(d==='4')\r\n                    setDays(32)\r\n                    else\r\n                    setDays(40)\r\n    \r\n                }\r\n               \r\n            }} >\r\n  <div className=\"form-group mb-2\">\r\n            <input id=\"ct\" className=\"form-control\" type=\"text\" placeholder=\"Enter City here...\" autoComplete=\"off\"></input>\r\n            \r\n    <select className=\"form-control\" id=\"ndays\">\r\n    <option > Select Days</option>\r\n      <option>1 Day</option>\r\n      <option>2 Days</option>\r\n      <option>3 Days</option>\r\n      <option>4 Days</option>\r\n      <option active=\"true\">5 Days</option>\r\n    </select>\r\n            <button type=\"submit\" className=\"btn btn-primary \">Search <i className=\"fa fa-search\"></i></button>\r\n            </div>\r\n            </form>\r\n            </div>\r\n            </div>\r\n            \r\n            \r\n            \r\n        \r\n            \r\n            {console.log(city)}\r\n            <Forcast city={city} days={days} time=\"03:00:00\"/>\r\n        </div>\r\n    )\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar'\nimport Chart from './components/Chart'\nfunction App() {\n  return (\n    <div className=\"App\">\n    \n        <div className=\"container\">\n          \n          \n        \n        \n          \n          <Navbar/> \n        \n           \n          </div>\n        \n          \n        </div>\n        \n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}